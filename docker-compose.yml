version: '3.8'

services:
  # RAG 應用程式
  rag-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-intelligent-assistant
    ports:
      - "8602:8501"
    volumes:
      # 掛載整個應用程式代碼 (開發模式)
      - .:/app
      - /app/data                  # 排除 data 目錄 (使用容器內版本)
      - ./data:/app/data           # 重新掛載 data 目錄 (持久化)
      - ./.env:/app/.env           # 掛載環境變數檔案
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - JINA_API_KEY=${JINA_API_KEY}
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      # Elasticsearch 配置
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEME=http
      - ELASTICSEARCH_INDEX_NAME=rag_intelligent_assistant
      - ENABLE_ELASTICSEARCH=true
      - RAG_SYSTEM_TYPE=elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - rag-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # FastAPI 智能問答 API 服務
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: rag-api
    ports:
      - "8002:8002"
    volumes:
      - .:/api
      - ./data:/api/data
      - ./.env:/api/.env
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - JINA_API_KEY=${JINA_API_KEY}
      - PYTHONPATH=/api
      # Elasticsearch 配置
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEME=http
      - ELASTICSEARCH_INDEX_NAME=rag_intelligent_assistant
      - ENABLE_ELASTICSEARCH=true
      - RAG_SYSTEM_TYPE=elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - rag-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Elasticsearch 向量資料庫
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: rag-elasticsearch
    environment:
      # 基本設定
      - node.name=rag-elasticsearch
      - cluster.name=rag-cluster
      - discovery.type=single-node
      
      # 記憶體設定 (可調整)
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      
      # 安全設定 (開發環境)
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      
      # 效能調整
      - bootstrap.memory_lock=true
      - action.auto_create_index=true
      
      # 磁盤空間設定 (開發環境 - 放寬限制)
      - cluster.routing.allocation.disk.threshold_enabled=false
      - cluster.routing.allocation.disk.watermark.low=90%
      - cluster.routing.allocation.disk.watermark.high=95%
      - cluster.routing.allocation.disk.watermark.flood_stage=99%
    
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data
    
    networks:
      - rag-network
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    
    restart: unless-stopped
  
  # Kibana (可選 - 用於 Elasticsearch 管理和監控)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: rag-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "127.0.0.1:5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - kibana
      - full

networks:
  rag-network:
    driver: bridge
    